1.3. Aufgabenstellung 3: Ghost Net Fishing
Du arbeitest im Web-Development-Team der großen Non-Profit-Organisation „Shea Sepherd“. Es soll ein neues
Projekt gestartet werden, mit dem Ziel, eine Web-App für den das Melden und Bergen von sogenannten
Geisternetzen zu entwickeln. Geisternetze sind herrenlose Fischernetze, die im Meer treiben. Der Requirements
Engineer hat sich bereits im Vorfeld mit ausgewählten Stakeholdern in der Organisation und der Fischerei
ausgetauscht und dazu die folgende Anforderung in das Fachkonzept geschrieben:

Ein Geisternetz hat die folgenden Eigenschaften:
− Standort (GPS-Koordinaten),
− geschätzte Größe und
− Status.

Der Status eines Geisternetzes kann folgende Ausprägungen haben:
− Gemeldet (Eine meldende Person hat das Geisternetz im System erfasst.)
− Bergung bevorstehend (Eine bergende Person hat die Bergung angekündigt.)
− Geborgen (Eine bergende Person hat das Geisternetz erfolgreich geborgen.)
− Verschollen (Eine beliebige Person hat festgestellt, dass das Geisternetz am gemeldeten Standort nicht
auffindbar ist.)

Es gibt meldende und bergende Personen. Beide Arten von Personen sind natürliche Personen mit einem Namen
und einer Telefonnummer für Rückfragen. Meldende Personen können anonym bleiben und brauchen dann keine
Telefonnummer. Man kann Netze aber nicht anonym als verschollen melden. Um unnötige Bergungsfahrten und
Missverständnisse zu vermeiden, können Geisternetze immer nur maximal einer bergenden Person zugeordnet
werden. Bergende Personen können allerdings mehr als ein Geisternetz gleichzeitig bergen.

Dazu hat er die folgenden User Stories im Product Backlog hinterlegt und nach der MoSCoW-Methode priorisiert:
1. MUST: Als meldende Person möchte ich Geisternetze (anonym) erfassen können.
2. MUST: Als bergende Person will ich mich für die Bergung eines Geisternetzes eintragen können.
3. MUST: Als bergende Person möchte ich sehen, welche Geisternetze noch zu bergen sind.
4. MUST: Als bergende Person möchte ich Geisternetze als geborgen melden können.
5. COULD: Als bergende Person möchte ich die noch nicht geborgenen Netze auf einer Weltkarte sehen.
6. COULD: Als bergende Person möchte ich sehen können, wer welche Geisternetze bergen möchte, um sich
ggf. abzustimmen und die Bergungen umzuverteilen.
7. COULD: Als beliebige Person möchte ich Geisternetze als verschollen melden können.
Das Projekt ist agil konfiguriert und Du bist Teil eines interdisziplinären Teams aus vielen Entwickler:innen.

Aufgabenstellung:
1. Richte ein öffentliches Code-Repository für Dein Projekt ein, z. B. in GitHub.
2. Entscheide Dich für fünf Anforderungen aus dem Product Backlog, die im ersten Sprint prototypisch umgesetzt
werden sollen.
3. Entwickle einen Prototyp für die Webanwendung, der die ausgewählten Funktionen rudimentär anbietet. Achte
dabei auf die persistente Datenhaltung. Nutze dabei den Technologiestack aus dem Skript:
− JSF und CDI/Beans, optional dazu: andere Komponentenbibliotheken (z. B. PrimeFaces);
− JPA mit einem Persistenz-Provider (z. B. Hibernate);
− eine relationale Datenbank (z. B. MySQL);
– Alternative: Verwende Spring bzw. Spring Boot mit Spring Beans anstelle von JSF mit CDI Beans. Nutze auch
in diesem Falle JPA oder Spring Data JPA zusammen mit einem JPA-Provider und einer relationalen Datenbank.
4. Dokumentiere die Entwicklung der Webanwendung. Im Hauptteil sollte das Design und die Umsetzung
beschrieben werden. Dabei soll jeweils im Entwurf und anhand von Screenshots in der tatsächlichen Umsetzung
gezeigt werden, wie …
−
… die einzelnen Webseiten gestaltet sind, und wie man zwischen den Webseiten hin- und herspringen kann,
− wie die Datenbankstruktur beschaffen ist und
− wie die softwaretechnische Architektur gestaltet ist (mind. ein UML-Strukturdiagramm inkl. aller
verwendeter Beans).
Hinweis: Von einem Prototyp erwartet der Product Owner eine App, die eine pragmatische, eher funktional
ausgerichtete Gestaltung der Nutzeroberfläche aufweist. Das Ergebnis muss also keinen Design Award gewinnen